name: Build and deploy Python app to Azure Web App
on:
  pull_request:
    branches: 
      - main
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    # Run the same job across a matrix of GitHub Environments (env names)
    # Each matrix entry should match a GitHub Environment configured in the repo
    strategy:
      fail-fast: false   # continue other matrix jobs if one fails
      matrix:
        # Start with a single GitHub Environment `rukasakurai-env`. To add more, append names here
        # Example: env: [rukasakurai-env, <github-username>-env]
        env: [rukasakurai-env]

    # Use the environment selected by the matrix so environment-scoped secrets are used
    environment: ${{ matrix.env }}
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install azd
        uses: Azure/setup-azd@v2

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: azd login
        run: |
          azd auth login --client-id ${{ secrets.AZURE_CLIENT_ID }} --tenant-id ${{ secrets.AZURE_TENANT_ID }} --federated-credential-provider github
        shell: pwsh

      - name: Provision Infrastructure
        run: |
          azd provision --no-prompt
        shell: pwsh
        env:
          AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_PRINCIPAL_TYPE: ${{ secrets.AZURE_SERVICE_PRINCIPAL }}

      - name: Refresh Environment State (safe / conditional)
        shell: pwsh
        run: |
          $envName = "${{ secrets.AZURE_ENV_NAME }}"
          Write-Host "Checking for azd environment '$envName'..."
          try {
            $envsJson = azd env list --output json 2>$null
            if (-not $envsJson) {
              Write-Host "No azd environments returned; skipping refresh (likely first-run)."
              exit 0
            }
            $envs = $envsJson | ConvertFrom-Json
          } catch {
            Write-Host "Unable to list azd environments; skipping refresh. Error: $_"
            exit 0
          }
          if ($envs -and ($envs | Where-Object { $_.name -eq $envName })) {
            Write-Host "Environment '$envName' found. Running azd env refresh..."
            azd env refresh --no-prompt
          } else {
            Write-Host "Environment '$envName' not found; skipping refresh (likely first-run)."
          }
        env:
          AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_PRINCIPAL_TYPE: ${{ secrets.AZURE_SERVICE_PRINCIPAL }}

      - name: Deploy Application
        run: |
          azd deploy --no-prompt
        shell: pwsh
        env:
          AZURE_ENV_NAME: ${{ secrets.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_PRINCIPAL_TYPE: ${{ secrets.AZURE_SERVICE_PRINCIPAL }}
